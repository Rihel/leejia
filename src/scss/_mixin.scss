$legacy-support-for-ie:true;
@mixin blockCenter{
  margin: {
    left: auto;
    right: auto;
  };
}
@mixin ceshi{
  border: 1px solid black;
}
@mixin child($i){
  &:nth-of-type(#{$i}){
   @content;
  }
}
@function rem($i){
  @return $i/12+rem;
}
@function remtablet($i){
  @return ($i/12)/3+rem
}
@mixin scale($num){
  -webkit-transform: scale($num);
  -moz-transform: scale($num);
  -ms-transform: scale($num);
  -o-transform: scale($num);
  transform: scale($num);
}
@mixin clearfix {
  @if $legacy-support-for-ie {
    *zoom: 1;
  }
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
    overflow: hidden;
  }
}
$breakpoints: (
        'xs': 'only screen and ( min-width: 480px)',
        'sm': 'only screen and ( min-width: 768px)',
        'md': 'only screen and ( min-width: 992px)',
        'lg': 'only screen and ( min-width: 1200px)',
) !default;
@mixin media($breakpoint) {
  $query: map-get($breakpoints, $breakpoint);

  @if not $query {
    @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }

  @media #{if(type-of($query) == 'string', unquote($query), inspect($query))} {
    @content;
  }
}